apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'realm-android'


def protoPath = 'src/main/proto'
def wireGeneratedPath = 'build/generated/source/wire'
def sqlPath = 'src/main/sql'
def sqlGeneratedPath = 'build/generated/source/sql/'

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'com.squareup.wire:wire-compiler:2.2.0'
    }
}

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"
    defaultConfig {
        applicationId "com.sendkoin.koincustomer"
        minSdkVersion 16
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        android.applicationVariants.all {
            def aptOutputDir = new File(buildDir, "generated/source/apt/${it.unitTestVariant.dirName}")
            it.unitTestVariant.addJavaSourceFoldersToModel(aptOutputDir)
        }
        multiDexEnabled true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }


    testOptions {
        unitTests.all {
            // All the usual Gradle options.
            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
                outputs.upToDateWhen { false }
                showStandardStreams = true
            }
        }
    }
    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }

    sourceSets {
        main.java.srcDirs += wireGeneratedPath
        main.java.srcDirs += sqlGeneratedPath
    }
    configurations.all {
        resolutionStrategy.force 'com.google.guava:guava:23.1-android'
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.google.code.findbugs'
    })

    compile 'com.android.support:appcompat-v7:25.3.1'
    compile 'com.android.support:design:25.3.1'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    compile 'com.android.support:gridlayout-v7:25.3.1'

    compile fileTree(dir: 'libs', include: ['*.jar'])
    // JUnit 4
    testCompile 'junit:junit:4.12'
    // Mockito
    testCompile 'org.mockito:mockito-core:1.10.19'
    androidTestCompile 'org.mockito:mockito-core:1.10.19'
    androidTestCompile 'com.google.dexmaker:dexmaker:1.2'
    androidTestCompile 'com.google.dexmaker:dexmaker-mockito:1.2'
    // Roboelectric
    testCompile "org.robolectric:robolectric:3.4.2"    // AssertJ
    testCompile 'org.assertj:assertj-core:3.6.2'

    // AndroidSwipeLayout
    compile "com.daimajia.swipelayout:library:1.2.0@aar"

    // Dagger
    compile 'com.google.dagger:dagger:2.9'
    annotationProcessor "com.google.dagger:dagger-compiler:2.9"
    provided 'javax.annotation:jsr250-api:1.0'
    testCompile 'com.google.dagger:dagger:2.9'
    testAnnotationProcessor 'com.google.dagger:dagger-compiler:2.9'
    androidTestAnnotationProcessor 'com.google.dagger:dagger-compiler:2.9'

    // Retrofit
    compile 'com.squareup.retrofit2:retrofit:2.0.2'

    // FAB
    compile 'com.getbase:floatingactionbutton:1.9.1'

    // OkHttp
    compile 'com.squareup.okhttp3:okhttp:3.2.0'
    compile 'com.squareup.okio:okio:1.7.0'

    // Gson
    compile 'com.google.code.gson:gson:2.6.2'
    compile 'com.squareup.retrofit2:converter-gson:2.0.1'

    // Butterknife
    compile 'com.jakewharton:butterknife:8.5.1'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.5.1'

    // ZXing Barcode
    compile 'com.google.zxing:core:3.2.1'
    compile 'me.dm7.barcodescanner:zxing:1.8.4'
    compile 'me.dm7.barcodescanner:zbar:1.9.2'
    compile 'com.journeyapps:zxing-android-embedded:3.5.0'

    //RxJava
    compile 'io.reactivex:rxjava:1.2.9'
    compile 'io.reactivex:rxandroid:1.2.1'
    compile 'com.squareup.retrofit2:adapter-rxjava:2.2.0'

    // Lightweight-Stream-API
    compile 'com.annimon:stream:1.1.7'

    // QrGen
    compile 'com.github.kenglxn.QRGen:android:2.2.0'

    // Calligraphy
    compile 'uk.co.chrisjenx:calligraphy:2.2.0'

    // Facebook SDK
    compile 'com.facebook.android:facebook-android-sdk:[4,5)'

    // Fancy Buttons
    compile 'com.github.medyo:fancybuttons:1.8.3'

    // Wire
    compile 'com.squareup.wire:wire-runtime:2.2.0'

    // SweetAlert
    compile 'cn.pedant.sweetalert:library:1.3'

    //green robot
    compile 'org.greenrobot:eventbus:3.0.0'

    // StorIO
    compile 'com.pushtorefresh.storio:sqlite:1.13.0'
    compile 'com.pushtorefresh.storio:sqlite-annotations:1.13.0'
    annotationProcessor 'com.pushtorefresh.storio:sqlite-annotations-processor:1.13.0'

    //Picasso + Tango Avatar View
    compile 'agency.tango.android:avatar-view:0.0.2'

    //if you want to use Picasso for loading images
    compile 'agency.tango.android:avatar-view-picasso:0.0.2'

    // Sectioned Recycler View adapter
    compile 'com.github.IntruderShanky:Sectioned-RecyclerView:2.1.1'

    // Card io
    compile 'io.card:android-sdk:5.5.1'

    // braintree cc form
    compile 'com.braintreepayments:card-form:3.0.6'

    // Joda Time
    compile 'net.danlew:android.joda:2.9.9'

    //Lollipin
    compile ('com.github.orangegangsters:lollipin:2.0.0@aar') {
        transitive = true
    }

    //guava
    compile 'com.google.guava:guava:23.1-android'

    compile 'com.android.support:multidex:1.0.1'

    compile 'uk.me.lewisdeane.ldialogs:ldialogs:1.2.0@aar'


}

// This handles the protocol buffer generation with wire
//./gradlew generateWireClasses
task generateWireClasses {
    description = 'Generate Java classes from protocol buffer (.proto) schema files for use with squareup\'s wire library'
    delete(wireGeneratedPath)
    fileTree(dir: protoPath, include: '**/*.proto').each { File file ->
        doLast {
            javaexec {
                main = 'com.squareup.wire.WireCompiler'
                classpath = buildscript.configurations.classpath
                args = ["--proto_path=${protoPath}", "--java_out=${wireGeneratedPath}", "${file}"]
            }
        }
    }
}

task generateSqlClasses {
    description = 'Generate sqlite tables and storio entities'
    fileTree(dir: sqlPath, include: '**/*.sql').each { File file ->
        doLast {
            javaexec {
                main = "-jar";
                classpath = buildscript.configurations.classpath
                args = ["codegen/CodeGenUnderStorIO.jar", "${file}", "com.sendkoin.sql", "${sqlGeneratedPath}"]
            }
        }
    }
}

preBuild.dependsOn generateSqlClasses
preBuild.dependsOn generateWireClasses
