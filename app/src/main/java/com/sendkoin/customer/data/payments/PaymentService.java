package com.sendkoin.customer.data.payments;

import com.sendkoin.api.AcceptTransactionRequest;
import com.sendkoin.api.AcceptTransactionResponse;
import com.sendkoin.api.InitiateStaticTransactionRequest;
import com.sendkoin.api.InitiateStaticTransactionResponse;
import com.sendkoin.api.ListTransactionsRequest;
import com.sendkoin.api.ListTransactionsResponse;
import com.sendkoin.api.TransactionDetail;

import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.POST;
import retrofit2.http.Path;
import retrofit2.http.Query;
import rx.Observable;


public interface PaymentService {
  /**
   * Get all payments after OR before a timestamp divided into pages
   * @param listTransactionsRequest - Proto Object encapsulate required request data
   * @param pageNumber
   * @return ListTransactionsResponse
   *
   * @see ListTransactionsRequest
   * @see ListTransactionsResponse
   */
  @POST("transactions/customer/list/")
  Observable<ListTransactionsResponse>
  getAllPayments(@Body ListTransactionsRequest listTransactionsRequest,
                 @Query("page") int pageNumber);

  /**
   * Used for DynamicQrPayments where the code is generated by merchant
   * @param acceptTransactionRequest - Proto object to encapsulate request data
   * @return AcceptTransactionResponse
   *
   * @see AcceptTransactionRequest
   * @see AcceptTransactionResponse
   */
  @POST("transactions/customer/accept/")
  Observable<AcceptTransactionResponse>
  acceptCurrentTransaction(@Body AcceptTransactionRequest acceptTransactionRequest);

  /**
   * Used for static payments where the customer initiates the payment and merchant confirms
   * @param initiateStaticTransactionRequest - Proto object to encapsulate request data
   * @return InitiateStaticTransactionResponse
   *
   * @see InitiateStaticTransactionRequest
   * @see  InitiateStaticTransactionResponse
   */
  @POST("transactions/customer/initiate/")
  Observable<InitiateStaticTransactionResponse>
  initiateCurrentTransaction(@Body InitiateStaticTransactionRequest initiateStaticTransactionRequest);

  /**
   * Used by the TransactionDetailsActivity to show the detailed reciept of a purchase
   * @param transactionToken - token to identify the transaction in DB
   * @return TransactionDetail
   *
   * @see TransactionDetail
   */
  @GET("transactions/customer/{token}/")
  Observable<TransactionDetail>
  getAllItems(@Path("token") String transactionToken);
}
