package com.sendkoin.customer.payment.paymentCreate;

import android.content.Context;
import android.os.Bundle;

import com.sendkoin.api.AcceptTransactionRequest;
import com.sendkoin.api.Category;
import com.sendkoin.api.InitiateStaticTransactionRequest;
import com.sendkoin.api.QrCode;
import com.sendkoin.api.SaleItem;
import com.sendkoin.api.Transaction;
import com.sendkoin.customer.BasePresenter;
import com.sendkoin.customer.data.payments.Models.inventory.InventoryItemLocal;
import com.sendkoin.sql.entities.InventoryOrderItemEntity;

import java.util.List;

/**
 * Handles communication between QrScannerActivity and the QrScannerPresenter
 * @see QrScannerPresenter
 * @see QrScannerActivity
 */

public interface QrScannerContract {

  interface View {
    Context getContext();

    /**
     * @param groupedInventoryItems - inventory items grouped by category
     */
    void showInventoryItems(List<Category> groupedInventoryItems);

    /**
     * @param inventoryOrderEntities - list of the customer's current order items. Used to calculate
     *                               the total amount/items bought when checking out
     */
    void handleOrderItems(List<InventoryOrderItemEntity> inventoryOrderEntities);

    /**
     * Process a payment on static/paper based qr
     * @param initiateStaticTransactionRequest
     * @param qrCode
     *
       @see InitiateStaticTransactionRequest
       @see QrCode
     */
    void processStaticTransaction(InitiateStaticTransactionRequest initiateStaticTransactionRequest,
                                  QrCode qrCode);

    /**
     * Process/Accept payment request generated by the merchant app
     * @param acceptTransactionRequest -
     * @param qrCode
     *
     * @see AcceptTransactionRequest
     * @see QrCode
     */
    void processDynamicTransaction(AcceptTransactionRequest acceptTransactionRequest,
                                   QrCode qrCode);

    /**
     * A confirmation to the user that order was deleted
     */
    void showOrderDeleted();
  }

  interface Presenter extends BasePresenter {
    void getInventory(String qrToken);
    void getOrderItems();
    void putOrder(String qrToken,InventoryItemLocal inventoryItemLocal);
    void removeAllOrders(Transaction transaction);

    /**
     * Create the InitiateStaticTransactionRequest object to send to the server. This initiates
     * payment after scanning a paper based QrCode
     * @param qrCode - the qr code and the token scanned
     * @param saleItemList - the items the customer has chosen to order
     */
    void createInitiateTransactionRequest(QrCode qrCode, List<SaleItem> saleItemList);

    /**
     * Create the AcceptTransactionRequest to accept the transaction created by the server
     * @param qrCode
     */
    void createAcceptTransactionRequest(QrCode qrCode);
  }


}
