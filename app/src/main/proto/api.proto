syntax = "proto2";
package com.sendkoin.api;

option java_package = "com.sendkoin.api";

message Customer {
    optional uint64 customer_id = 1;
    optional string full_name = 2;
    optional string email = 3;
}

message Merchant {
    optional uint64 merchant_id = 1;
    optional string store_name = 2;
    optional string store_location = 3;
    optional string store_type = 4;
    optional string phone_number = 5;
    optional string email_address = 6;
}

message FacebookAuthenticationRequest {
    optional string access_token = 1;
}

message AuthenticationResponse {
    optional string session_token = 1;
    oneof entity {
        Customer customer = 2;
        Merchant merchant = 3;
    }
}

message InitiateDynamicTransactionRequest {
    optional string idempotence_token = 1;
    repeated SaleItem sale_items = 2;
}

message InitiateDynamicTransactionResponse {
    optional QrCode qr_code = 1;
    optional string transaction_token = 2;
    optional Status status = 3;
}

message InitiateStaticTransactionRequest {
    optional string qr_token = 1;
    repeated SaleItem sale_items = 2;
}

message InitiateStaticTransactionResponse {
    optional Order order = 1;
    optional Status status = 2;
}

message AcceptTransactionRequest {
    optional string qr_token = 1;
    optional string idempotence_token = 2;
}

message AcceptTransactionResponse {
    optional Transaction transaction = 1;
    optional Status status = 2;
}

message GetQrDetailsResponse {
    optional string qr_token = 1;
    optional QrType qr_type = 2;
    optional string merchant_name = 3;
    optional uint32 amount = 4;
}

message ListTransactionsRequest {
    optional QueryParameters query_parameters = 1;
}

message ListTransactionsResponse {
    repeated Transaction transactions = 1;
    optional bool has_next_page = 2;
}

message OnboardMerchantRequest {
    optional string store_name = 1;
    optional string store_location = 2;
    optional string store_type = 3;
}

message OnboardMerchantResponse {
    optional Merchant merchant = 1;
    optional Status status = 2;
}

message RefreshFCMTokenRequest {
    optional string token = 1;
}

message RefreshFCMTokenResponse {
    optional Status status = 1;
}

message Transaction {
    optional string token = 1;
    optional uint64 created_at = 2;
    optional Merchant merchant = 3;
    optional uint32 amount = 5;
    optional TransactionState state = 6;
}

enum TransactionState {
    VALIDATING = 1;
    WAITING_ON_MERCHANT = 2;
    WAITING_ON_CUSTOMER = 3;
    WAITING_ON_RISK = 4;
    PROCESSING = 5;
    COMPLETE = 6;
    FAILED = 7;
}

message ListOrdersRequest {
    optional QueryParameters query_parameters = 1;
}

message ListOrdersResponse {
    repeated Order order = 1;
    optional bool has_next_page = 2;
}

message CompleteOrderResponse {
    optional Order order = 1;
    optional Status status = 2;
}

message PickUpOrderResponse {
    optional Order order = 1;
    optional Status status = 2;
}

message Order {
    optional uint64 order_id = 1;
    optional uint64 created_at = 2;
    optional uint64 updated_at = 3;
    optional Transaction transaction = 4;
    optional OrderState state = 5;
}

message OrderDetails {
    optional Order order = 1;
    repeated SaleItem sale_items = 2;
}

enum OrderState {
    VALIDATING = 1;
    WAITING_ON_CUSTOMER = 2;
    ORDER_PROCESSING = 3;
    ORDER_PENDING_PICKUP = 4;
    COMPLETE = 5;
    FAILED = 6;
}

message TransactionDetail {
    optional Transaction transaction = 1;
    repeated SaleItem sale_items = 2;
}

message QueryParameters {
    optional uint64 updates_before = 1;
    optional uint64 updates_after = 2;
    optional Order order = 3;
    optional uint32 page_size = 4;
    optional TransactionState transaction_state = 5;
    optional OrderState order_state = 6;

    enum Order {
        ASCENDING = 1;
        DESCENDING = 2;
    }
}

message SaleItem {
    optional uint64 item_id = 1;
    optional string name = 2;
    optional uint32 price = 3;
    optional uint32 quantity = 4;
    optional string customer_notes = 5;
    optional SaleType sale_type = 6;

    enum SaleType {
        INVENTORY_SALE = 1;
        QUICK_SALE = 2;
    }
}

message Status {
    optional Result result = 1;
    optional string error_message = 2;

    enum Result {
        SUCCESS = 0;
        FAILURE = 1;
    }
}

message QrCode {
    optional string qr_token = 1;
    optional string merchant_name = 2;
    optional uint32 amount = 3;
    optional QrType qr_type = 4;
}

enum QrType {
    DYNAMIC = 1;
    STATIC = 2;
    INVENTORY_STATIC = 3;
}

message InventoryItem {
    optional uint64 inventory_item_id = 1;
    optional string name = 2;
    optional uint32 price = 3;
    optional uint32 quantity = 4;
    optional string description = 5;
    optional string image_url = 6;
}

message Category {
    optional uint64 category_id = 1;
    optional string category_name = 2;
    repeated InventoryItem inventory_items = 3;
}

/* GET /inventory */
message GetInventoryResponse {
    repeated Category categories = 1;
}

/* POST /inventory/category */
message CreateCategoryRequest {
    optional string category_name = 1;
}

message CreateCategoryResponse {
    optional Category category = 1;
    optional Status status = 2;
}

/* PUT /inventory/category/:id */
message UpdateCategoryRequest {
    optional string category_name = 1;
}

message UpdateCategoryResponse {
    optional Category category = 1;
    optional Status status = 2;
}

/* DELETE /inventory/category/:id */
message DeleteCategoryResponse {
    optional Category category = 1;
    optional Status status = 2;
}

/* POST /inventory/category/:id */
message AddInventoryItemsRequest {
    repeated InventoryItem inventory_items = 1;
}

message AddInventoryItemsResponse {
    repeated InventoryItem inventory_items = 1;
    optional Status status = 2;
}

/* PUT /inventory/category/:category_id/items/:id */
message UpdateInventoryItemRequest {
    optional InventoryItem inventory_item = 1;
}

message UpdateInventoryItemResponse {
    optional InventoryItem inventory_item = 1;
    optional Status status = 2;
}

/* DELETE /inventory/category/:category_id/items/:id */
message DeleteInventoryItemRequest {
    optional InventoryItem inventory_item = 1;
}

message DeleteInventoryItemResponse {
    optional InventoryItem inventory_item = 1;
    optional Status status = 2;
}