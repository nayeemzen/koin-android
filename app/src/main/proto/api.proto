syntax = "proto2";
package com.sendkoin.api;

option java_package = "com.sendkoin.api";

message Customer {
    optional uint64 customer_id = 1;
    optional string full_name = 2;
    optional string email = 3;
}

message Merchant {
    optional uint64 merchant_id = 1;
    optional string store_name = 2;
    optional string store_location = 3;
    optional string store_type = 4;
    optional string phone_number = 5;
    optional string email_address = 6;
}

message FacebookAuthenticationRequest {
    optional string access_token = 1;
}

message AuthenticationResponse {
    optional string session_token = 1;
    oneof entity {
        Customer customer = 2;
        Merchant merchant = 3;
    }
}

message InitiateTransactionRequest {
    optional uint64 created_at = 1;
    /* Needed to implement idempotence and prevent replay attacks. */
    optional string idempotence_token = 2;
    repeated SaleItem sale_items = 3;
}

message InitiateTransactionResponse {
    /* The QrCode uniquely identifying this tranasction. */
    optional QrCode qr_code = 1;
    optional string transaction_token = 2;
    optional Status status = 3;
}

message AcceptTransactionRequest {
    optional string qr_token = 1;
    optional uint32 sale_amount = 2;
    optional string idempotence_token = 3;
}

message AcceptTransactionResponse {
    optional Transaction transaction = 1;
    optional Status status = 2;
}

message GetQrDetailsResponse {
    optional string qr_token = 1;
    optional QrType qr_type = 2;
    optional string merchant_name = 3;
    optional uint32 amount = 4;
}

message ListTransactionsRequest {
    optional QueryParameters query_parameters = 1;
}

message ListTransactionsResponse {
    repeated Transaction transactions = 1;
    optional bool has_next_page = 2;
}

message OnboardMerchantRequest {
    optional string store_name = 1;
    optional string store_location = 2;
    optional string store_type = 3;
}

message OnboardMerchantResponse {
    optional Merchant merchant = 1;
    optional Status status = 2;
}

message RefreshFCMTokenRequest {
    optional string token = 1;
}

message RefreshFCMTokenResponse {
    optional Status status = 1;
}

message Transaction {
    optional string token = 1;
    optional uint64 created_at = 2;
    optional Merchant merchant = 3;
    optional uint32 amount = 5;
    optional State state = 6;

    enum State {
        WAITING_ON_MERCHANT = 1;
        WAITING_ON_CUSTOMER = 2;
        WAITING_ON_RISK = 3;
        PROCESSING = 4;
        COMPLETE = 5;
        FAILED = 6;
    }
}

message TransactionDetail {
    optional Transaction transaction = 1;
    repeated SaleItem sale_items = 2;
}

message QueryParameters {
    optional uint64 updates_before = 1;
    optional uint64 updates_after = 2;
    optional Order order = 3;
    optional uint32 page_size  = 4;

    enum Order {
        ASCENDING = 1;
        DESCENDING = 2;
    }
}

message SaleItem {
    optional uint64 item_id = 1;
    optional string name = 2;
    optional uint32 price = 3;
    optional uint32 quantity = 4;
    optional SaleType sale_type = 5;

    enum SaleType {
        INVENTORY = 1;
        QUICK_SALE = 2;
        STATIC_QR = 3;
    }
}

message Status {
    optional Result result = 1;
    optional string error_message = 2;

    enum Result {
        SUCCESS = 0;
        FAILURE = 1;
    }
}

message QrCode {
    optional string qr_token = 1;
    optional string merchant_name = 2;
    optional uint32 amount = 3;
    optional QrType qr_type = 4;
}

enum QrType {
    STATIC = 1;
    DYNAMIC = 2;
}